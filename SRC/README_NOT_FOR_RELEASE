
this is a direct copy of its parent:

UIOWA_BD_2022_FOR_RELEASE_CULLED_SPOTRF .

here we will tart the code up so that it is fully ready for release:

(1) remove reading of "Q" in charge.parameters
(2) allow restart.file to have a different name
(3) allow testout.001.xtc to have a different name
(4) write to RESTARTS at a fixed interval?
(5) make parameter.file be read fixed-format with a title line
(6) sort out radius or sigma FFS



this is a direct copy of its parent:

UIOWA_BD_2021_FOR_RELEASE_CULLED_SPOTRF

(0) fix bug in energy write out - move ene_v_st_loc etc so they are zero'd each step

(1) here we remove the pointless ic1map,ic2map,ic3map stuff that I used to use
to supposedly speed up the checking of nonbonded interactions

    make_nonbond_list.f

NOTE THAT DOING THIS I FOUND A BUG IN THE HIGH_MEM CODE:

            i1=int((w1-xmin)/x_ff)+1
            i2=int((w2-ymin)/y_ff)+1
            i3=int((w3-zmin)/z_ff)+1

ALL OF THESE LINES SHOULD CHANGE "w1" TO "d1" ETC
THIS IS NOT A PROBLEM FOR PUBLICATIONS AS WE HAVE NOT USED THIS OPTION
BUT THIS NEEDS TO BE FIXED IN ALL VERSIONS MOVING FORWARD JUST IN CASE

also removed a bunch of already-commented lines in:

    shrink_box.f

(2) sort out all i_pbc entries, e.g. to assign_atoms_to_grid.f

    assign_static_atoms_to_grid.f
    assign_atoms_to_grid.f

(3) remove the use of the minimum distance convention for HIs: makes no sense
    when we are not using Ewald...

    calculate_diffusion_tensor.f

------------------------------------------
should be able to compile everything thus:
------------------------------------------

cp /opt/intel/compilers_and_libraries_2016.2.181/linux/mkl/include/mkl_vsl.f90 .
ifort -c mkl_vsl.f90 ; ifort -c uiowa_bd.modules.f ; make uiowa_bd





this folder is an exact copy of:

WORKING_NEW_CODE_VDW_STRIPED_NONCRITICAL_LINCS_MIXED_WORKING_IDOYHL_INTRA_REPLICA_REHASH2_GAUSSIAN_2020

here we will attempt to knock the code into shape so that it can be released
to the community - this will involve making sure that all aspects can be 
recompiled if necessary, at least using the intel compiler
following will be a complete list of issues encountered and/or fixed:

(1) changed '-openmp' in makefile to '-qopenmp'
(2) compilation works as laid out in the makefile, i.e.:

rm *.mod ; rm *.o ; ifort -c uiowa_bd.modules.f ; make uiowa_bd.o ; make HSL_MP54_CODE_STOPS_ON_STACK_OVERFLOW.o ; make treecode3d_final.o ; make uiowa_bd

note that we compile HSL_MP54 code using the -O0 option (see makefile) - this allows it
to work with openmp (use of -O2 appears to result in it hanging...)
this may mean that we are losing some performance, but at least it appears to work...

(3) we have a test system here:

n14 /scratch/aelcock/0001_4DSHRINK_SCALED_AEM_DIFFUSION/DIFFUSION/

(4) libxdrf.a came from here:

/home/aelcock/CURRENT_CODES/XTC_LIBRARY_FILE_SOURCE/IFORT_2020

(5) we removed hydrodynamic treecode stuff as it was never fully implemented
    did this using:

grep "hydrodynamic_treecode" *f

vi calculate_diffusion_tensor.f  (remove use hydrodynamic_treecode)
vi uiowa_bd.f                    (remove use hydrodynamic_treecode)
rm treecode_HI_routines.*
vi uiowa_bd.modules.f

passed check that the code still compiles from scratch

(6) consider reinstating treecode_elec?

o  reinstate treecode_elec stuff?
   NO - it's too complicated and messy currently
   UPDATE - it looks easier than I thought - just need minor edit to finalize_long_range_forces...
            NOT YET CHECKED FORCES BUT ENERGIES LOOK GOOD...

   I have found the two critical pieces of code but it looks like
   the first of these is updated to add the extra array dimension for
   different replicas while the second is not - I think it's better
   to keep the "ctt" comments on these sections so that they're not used

cp ../WORKING_NEW_CODE_VDW_STRIPED_NONCRITICAL_LINCS_MIXED_WORKING_IDOYHL_INTRA_REPLICA_REHASH2_GAUSSIAN_GENOME_TREECODE/calculate_treecode_elec.f .
cp ../WORKING_NEW_CODE_VDW_STRIPED_NONCRITICAL_LINCS_MIXED_WORKING_IDOYHL_INTRA/finalize_long_range_forces.f .

   note that the finalize_long_range_forces.f will need reworking to make it compatible with
   this version of the code, so for now, we'll just push it to a name that won't get compiled:

mv finalize_long_range_forces.f finalize_long_range_forces.f.from_somewhere

o  remove all references to i_do_YHL?
   POSSIBLY - it would simplify the code considerably

o  remove i_do_lincs?
o  remove i_do_growth?
o  remove i_do_slide?
o  lots of other things?!




-------------------------------------------------------------------------------

this is an exact copy of:

WORKING_NEW_CODE_VDW_STRIPED_NONCRITICAL_LINCS_MIXED_WORKING_IDOYHL_INTRA_REPLICA_REHASH2_GAUSSIAN_2018

the only difference here is to ask if we can compile it on 8/14/2020...
we compiled it thus:

rm *.mod ; rm *.o ; ifort -c uiowa_bd.modules.f ; make uiowa_bd.o ; make HSL_MP54_CODE_STOPS_ON_STACK_OVERFLOW.o ; make treecode3d_final.o ; make uiowa_bd

it worked - it complained that we should use -qopenmp during compilation but
still went ahead...

-------------------------------------------------------------------------------


CURRENT STATE OF PLAY - ASSIGN_ATOMS ROUTINE COULD EASILY BE SPEEDED UP
BY ALLOCATING RAM ACCORDING TO MAX OCCUPIED CELL - TAKES A HIT IN RAM 
USAGE BUT MUCH QUICKER - STILL NEED TO IMPLEMENT TRIPLE LOOP REVERSAL - 
ALSO WORTH CONSIDERING REINSTATEMENT OF I_USE_HIGH_MEM AS THIS MAY 
SPEED UP COT SIMS A LOT - NEEDS WORK IN THE MAKE_NONBONDED BIT - FINALLY
SEEMS LIKE IT'D BE WELL WORTH MAKING SURE THAT STATIC ATOMS BIT WORKS
WITH I_DO_YHL: THE LATTER IS A CLEAR WIN WHEN WE USE ONE THREAD...
LET'S SEE IF TIMINGS CAN NOW BE BELIEVED ALSO...

Sep 5 2019:
-----------

note that I have made a BACKUP directory but I think this was after some
of the changes noted below had already been made - it was definitely done
after the changes described in (1) were made.

(1) worked to reinstate the slide and growth code so that we can do cotranslational simulations
with a more or less up-to-date version of the code 

this involved making the following changes (among others):

pass information to the "calculate_slide_forces.f" subroutine from "uiowa_bd.f"
uncomment the updating of the growth counters in "update_counters.f"

(2) will use i_omit_move_mtyp(:), i_omit_move_a(:) to speed up calculations by allowing
some atoms to be frozen - need to make sure that their bonds are skipped at read-in

add c_typ(:)%s(:) = 1 if atom of that mol type is static; =0 if dynamic
add stt_of_atm(:) = 1 if atom of total system is static; =0 if dynamic
use c_typ(:)%s(:) to determine which bonds/angles/dihedrals to keep
  --> change "make_internal_parameters.f"

(3) make sure that atoms are divvied up amongst threads only if they are moving - we
basically require that all moving atoms appear before all static atoms and reuse
ibeg_f_a and iend_f_a (which are almost deprecated) to cover only moving atoms - 
note that this should automatically ensure that nonbonded list generation and 
subsequent force calculations cover only the moving atoms - we introduce, for this
purpose, "num_mov_atms", analogous to "num_tot_atms"

(4) make sure that position updates use only moving atoms... UPDATE - I think that
this is automatically taken care of by the change made in (3)
note that many arrays remain dimensioned up to "num_tot_atms" - eventually some of
these may want to be changed to "num_mov_atms" but this seems low priority and would
need to be done carefully in order not to cock up calls to subroutines

(5) update "assign_atoms_to_grid.f" so that it only works on moving atoms - now done:
just needed to change "num_tot_atms" to "num_mov_atms"

(6) make a second grid (cll_f_2) that will store the static atoms and then make a
copy of "assign_atoms_to_grid.f" that is called "assign_static_atoms_to_grid.f"
this also necessitates adding an additional do loop in "make_nonbonded_list.f" that
provides an easy way of adding nonbonded interactions between moving and static atoms
- the first iteration of the loop "do klm=1,2" finds moving-moving pairs, while the
second iteration binds moving-static pairs 

(7) commented out "imin_thrd" bit - which is related to i_do_YHL - in 
"make_nonbonded_list.f" - THIS MEANS THAT WE CANNOT USE I_DO_YHL YET...

(8) commented out "iiib_new" bit in calculate_slide_forces.f - this only
seems relevant to energy calculations to I think this is an acceptable change

(9) not yet implemented: we should replace the unnecessary triple loop in 
"make_nonbonded_list.f" with a single loop and put the triple loop instead in
"assign_atoms_to_grid."...

Jan 12 2018:
------------

this is the same as its parent:

WORKING_NEW_CODE_VDW_STRIPED_NONCRITICAL_LINCS_MIXED_WORKING_IDOYHL_INTRA_REPLICA_REHASH2_GAUSSIAN

but is recompiled with the new compiler
we make ONE change: when we call  read_wall_functions(num_walls)
we pass num_walls explicitly - without this, num_walls=0...

June 23 2015:
-------------

same as ../...NEWIFORT 

NOTE THAT WE STILL HAVE THE ISSUE THAT THE HSL CODE IS BROKEN WITH THE NEW COMPILER
SO WE KEEP USING THE ONE FROM PREVIOUSLY

February 3 2015:
----------------

I don't know why I did what I did on November 2 - it says there was a problem with
random displacements for big systems but I don't remember that. I'm going to reinstate
the old files and work with those again...

mkdir EXTRA_FILES
mv move_atoms.f  EXTRA_FILES/
mv uiowa_bd.f EXTRA_FILES/
mv HSL_MP54_CODE_STOPS_ON_STACK_OVERFLOW.f90 EXTRA_FILES/
cp BACKUP/move_atoms.f .
cp BACKUP/uiowa_bd.f .
cp BACKUP/HSL_MP54_CODE_STOPS_ON_STACK_OVERFLOW.f90 .

November 2 2014:
----------------

NOTE THAT I HAVE REPLACED uiowa_bd.f HSL... and move_atoms with routines that will
not use random displacements - theres't a problem with the latter with big systems..


here is where we will try to rework the replica exchange approach so that all we pass is the
details of the hamiltonian - we don't pass nonbonded lists/coordinates/forces etc - should
be much simpler to deal with


all of the steps needed to recompile the code can be combined into the following command:

rm *.mod ; rm *.o ; ifort -c uiowa_bd.modules.f ; make uiowa_bd.o ; make HSL_MP54_CODE_STOPS_ON_STACK_OVERFLOW.o ; make treecode3d_final.o ; make uiowa_bd

this code appears to be more or less ready to go. it includes an option on the first line
for using "i_do_YHL" which invokes YHL's scheme for exploiting newton's law so we only
have to calculate nonbonded interactions once. in theory this code should be more efficient
and it is certainly faster with small thread counts. unfortunately it's not thread-safe
for treecode - i currently have the f_e_x_st array being updated in a non-thread-safe manner
- it's possible i can fix this but for now our focus is on high thread-count jobs so we'll
be proceeding in most cases with i_do_yhl=.false.

things that need fixing with high priority:

(1) need to relook at the ../...GURGEH version to reinsert GPU functionality

note that we haven't yet put the treecode back in with replica_exchange:

rm finalize_long_range_forces.f
rm change_protonation_states.f
rm calculate_treecode_elec.f

we'll need to resurrect these codes later...

